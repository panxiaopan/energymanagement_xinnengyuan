<template>
  <div class="hj-creat-user-form">
    <el-form
      ref="userForm"
      label-position="right"
      label-width="80px"
      :model="staffBasePropertyForm"
      :rules="rules"
    >
      <el-form-item :label="self.$t('systemSetting.telephone')" prop="tel">
        <el-input v-model="staffBasePropertyForm.tel" size="small"></el-input>
      </el-form-item>
      <el-form-item :label="self.$t('systemSetting.loginName')" prop="loginName">
        <el-input v-model="staffBasePropertyForm.loginName" size="small"></el-input>
      </el-form-item>
      <el-form-item :label="self.$t('systemSetting.nickname')" prop="username">
        <el-input v-model="staffBasePropertyForm.username" size="small"></el-input>
      </el-form-item>

      <el-form-item :label="self.$t('systemSetting.role')" prop="roleIds" class="roletrasfer">
        <!-- <div > -->
        <el-transfer
          v-model="staffBasePropertyForm.roleIds"
          :data="data"
          :props="{key:'roleId', 
        label:'roleName'}"
          :titles="transferTitles"
          :button-texts="transferBtnTexts"
          @change="handleChangePath"
        ></el-transfer>
        <!-- </div> -->
      </el-form-item>
      <el-form-item :label="self.$t('systemSetting.userGroup')" prop="groupId">
        <div style="display:flex;justify-content:space-between;z-index:1111111;">
          <el-cascader
            ref="cascader"
            size="small"
            :options="options"
            :props="defaultProps"
            change-on-select
            clearable
            @change="change"
            v-model="staffBasePropertyForm.groupId"
            style="width:100%;"
          ></el-cascader>
        </div>
      </el-form-item>
    </el-form>
  </div>
</template>

<script>
// import Vue from "vue";
// import clone from "clone";
export default {
  name: "createUserForm",
  componentName: "createUserForm",
  components: {},
  props: {
    testName: {
      type: String,
      default: ""
    },
    userData: {
      type: [Object, Array],
      default: () => []
    },
    userGroupId: {
      type: Array,
      default: () => []
    },
    self: {
      type: Object
    }
  },
  data() {
    var defaultFormData = {
      loginName: "",
      username: "",
      tel: "",
      roleIds: [],
      groupId: []
    };
    var validateLoginName = (rule, value, callback) => {
      if (value === "") {
        callback(new Error(this.self.$t("systemSetting.inputLoginName")));
      } else {
        var errorString = "";
        switch (true) {
          case !isNaN(+value):
            errorString = this.self.$t("systemSetting.noAllNumberAtLoginName");
            break;
          case /\s+/.test(value):
            errorString = this.self.$t("systemSetting.noSpaceAtLoginName");
            break;
          // case  /\W+/g.test(value):
          case /[^A-Za-z0-9_\-\u4e00-\u9fa5]+/g.test(value):
            // errorString = '支持中文,字母,数字, "_", "-"';
            errorString = this.self.$t("systemSetting.inputCharFormatTips");
            break;
        }
        if (errorString) {
          callback(new Error(errorString));
        } else {
          callback();
        }
      }
    };
    var validateUsername = (rule, value, callback) => {
      console.log("validateUsername", "rule", rule, "value", value);
      if (value == "") {
        callback(new Error(this.self.$t("systemSetting.inputNickname")));
      } else {
        callback();
      }
    };
    var validateRoleIds = (rule, value, callback) => {
      console.log("validateRoleIds", "rule", rule, "value", value);
      if (!value.length) {
        callback(new Error(this.self.$t("systemSetting.assignRole")));
      } else {
        callback();
      }
    };
    var validateGroupId = (rule, value, callback) => {
      console.log("validateGroupId", "rule", rule, "value", value);
      if (!value.length) {
        callback(new Error(this.self.$t("systemSetting.selectUserGroup")));
      } else {
        callback();
      }
    };
    var telValidator = (rule, value, callback) => {
      //  let value = item.value
      //   let tips = item.placeholder
      // let unValidTips = placeholderObj[lang]['unvalidTel']
      // let name = item.name || ''
      let fixedReg = /^(([0\+]\d{2,3}-)?(0\d{2,3})-)?(\d{7,8})(-(\d{3,}))?$/;
      let mobileReg = /^1(3|4|5|7|8)\d{9}$/;
      // console.log('tel value', value, mobileReg.test(value), fixedReg.test(value))
      if (value === "" || (value.trim && value.trim().length === 0)) {
        callback(new Error(this.self.$t("systemSetting.inputPhoneNum")));
      } else if (!(fixedReg.test(value) || mobileReg.test(value))) {
        //手机和固定电话校验
        callback(new Error(this.self.$t("systemSetting.errorPhoneNum")));
      } else {
        callback();
      }
    };
    return {
      transferTitles: [
        this.self.$t("systemSetting.roleList"),
        this.self.$t("systemSetting.selectedRole")
      ],
      transferBtnTexts: [
        this.self.$t("systemSetting.delete"),
        this.self.$t("systemSetting.add")
      ],
      options: [],
      defaultProps: {
        label: "name",
        value: "id",
        children: "subTrees"
      },
      data: [],
      testStr: "testStr text",
      id: "testid",
      getAllRolesUrl: "/auth/roles",
      defaultFormData,
      // staffBasePropertyForm: Object.assign({},defaultFormData, {roleIds:[], groupId:[]}),
      staffBasePropertyForm: Object.assign({}, defaultFormData),
      rules: {
        loginName: [
          {
            validator: validateLoginName,
            trigger: "change"
          }
        ],
        username: [
          // {
          //   type: 'string',
          //   require: true,
          //   message: '请输入用户名',
          //   trigger: 'blur,change',
          // },
          {
            validator: validateUsername,
            trigger: "change"
          }
        ],
        tel: [
          {
            require: true,
            message: this.self.$t("systemSetting.inputPhoneNum"),
            trigger: "change"
          },
          {
            // pattern: /^1[34578]\d{9}$/,
            validator: telValidator,
            // message: this.$t("systemSetting.errorPhoneNum"),
            trigger: "change"
          }
        ],
        roleIds: [
          {
            type: "array",
            require: true,
            message: this.self.$t("systemSetting.assignRole")
          },
          {
            validator: validateRoleIds,
            trigger: "blur"
          }
        ],
        groupId: [
          {
            type: "array",
            require: true,
            message: this.self.$t("systemSetting.selectUserGroup")
          },
          {
            validator: validateGroupId,
            trigger: "blur"
          }
        ]
      }
    };
  },
  watch: {
    userGroupId(newVal, oldVal) {
      // this.staffBasePropertyForm.groupId userGroupId
      this.staffBasePropertyForm.groupId = newVal.map(item => {
        return item;
      });
    }
  },
  methods: {
    checkChildArr(arr) {
      if (!arr || !arr.length) {
        return;
      }
      arr.forEach(item => {
        if (!item.subTrees) {
          return;
        }
        // item.id=item.id+''
        if (!item.subTrees.length) {
          item.subTrees = undefined;
          return;
        }
        this.checkChildArr(item.subTrees);
      });
    },
    queryRolesData() {
      var url = this.getAllRolesUrl;
      var json = {};
      this.$http({
        url,
        json
      }).then(response => {
        console.log("角色======");
        console.log(response);

        let code =
          response.data && response.data.head && response.data.head.code;
        if (+code === 0) {
          this.data = response.data.data;
        }
      });
    },
    resetFormData() {
      Object.assign(this.staffBasePropertyForm, this.defaultFormData);
      this.$refs.userForm.resetFields();
      console.log("defaultFormData", this.defaultFormData);
      console.log("staffBasePropertyForm", this.staffBasePropertyForm);
    },
    validate() {
      this.$refs.userForm.validate(valid => {
        if (valid) {
          // alert('submit!');
        } else {
          console.log("error submit!!");
          return false;
        }
      });
      this.$refs.userForm.validateField("username", function(errorMessage) {
        console.log("验证表单域", errorMessage);
      });
      console.log("staffBasePropertyForm", this.staffBasePropertyForm);
    },
    getFormData() {
      // var result = clone(this.staffBasePropertyForm);
      var result = { ...this.staffBasePropertyForm };
      return result;
    },
    change(val) {
      console.log(val);
      console.log(this.formData);
      console.log(this.currentData);
      console.log("defaultFormData", this.defaultFormData);
      console.log("staffBasePropertyForm", this.staffBasePropertyForm);

      // alert(typeof (this.formData[this.formData.length-1].value))
      // this.currentData
      // this.formData[this.formData.length-1].value.forEach((item)=>{
      //   // alert(typeof item)
      // })
    },
    handleChangePath(val, arrow, roleIds) {
      console.log(
        "handleChangePath",
        "val",
        val,
        "arrow",
        arrow,
        "roleIds",
        roleIds
      );
      console.log(
        "staffBasePropertyForm roleIds",
        this.staffBasePropertyForm.roleIds
      );
    },
    newWindowDialog() {
      var h = this.$createElement;
      this.$msgbox({
        title: this.self.$t("systemSetting.addUser"),
        message: h(
          "test-str",
          {
            style: "color: teal",
            props: {
              testName: "bar"
            },
            on: {
              "get-code": this.clickAdd
            },
            ref: "testStr"
          },
          "VNode"
        ),
        // message: h('p', null, [
        //   h('span', null, '内容可以是 '),
        //   h('i', { style: 'color: teal' }, 'VNode')
        // ]),
        // message: <div>teswt</div>,
        // message: require('./testStr.vue'),
        // message: <test-str test-name='testmyname'></test-str>,
        showCancelButton: true,
        confirmButtonText: this.self.$t("systemSetting.ok"),
        cancelButtonText: this.self.$t("systemSetting.cancel"),
        beforeClose: (action, instance, done) => {
          if (action === "confirm") {
            // alert(this.$refs.testStr.id);
            instance.confirmButtonLoading = true;
            instance.confirmButtonText = this.$t("systemSetting.excuting");
            setTimeout(() => {
              done();
              setTimeout(() => {
                instance.confirmButtonLoading = false;
              }, 300);
            }, 3000);
          } else {
            instance.confirmButtonLoading = false;
            done();
          }
        }
      }).then(action => {
        this.$message({
          type: "info",
          message: "action: " + action
        });
      });
    },
    clickAdd(val) {
      if (val == "getcode") {
        // this.newWindowDialog()
        this.$emit("getCode", "test get code params");
      }
    }
  },
  created() {
    this.queryRolesData();
  },
  mounted() {
    this.staffBasePropertyForm.groupId = this.userGroupId.map(item => {
      return item;
    });
    var options = this.userData;
    this.checkChildArr(options);
    this.options = options;
  }
};
</script>

<style lang='less'>
.el-cascader-menus {
  z-index: 1030230 !important;
}
</style>

<style >
.roletrasfer .el-form-item__content {
  line-height: 0px !important;
}
</style>